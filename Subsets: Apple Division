def min_weight_difference(n, weights):
    total_weight = sum(weights)
    half_weight = total_weight // 2
    
    # Initialize a DP table to store the possible weights
    dp = [[False] * (half_weight + 1) for _ in range(n + 1)]
    dp[0][0] = True
    
    # Iterate over apples
    for i in range(1, n + 1):
        for j in range(half_weight + 1):
            # Check if the weight can be achieved by including or excluding the current apple
            if j >= weights[i - 1]:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - weights[i - 1]]
            else:
                dp[i][j] = dp[i - 1][j]
    
    # Find the minimum difference
    min_diff = total_weight
    for j in range(half_weight, -1, -1):
        if dp[n][j]:
            min_diff = total_weight - 2 * j
            break
    
    return min_diff

# Read input
n = int(input())
weights = list(map(int, input().split()))

# Calculate and print the minimum difference between the weights of the groups
print(min_weight_difference(n, weights))
